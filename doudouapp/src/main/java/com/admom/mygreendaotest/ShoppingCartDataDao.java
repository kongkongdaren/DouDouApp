package com.admom.mygreendaotest;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yjlw.ddms.homeentity.entity.ShoppingCartData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOPPING_CART_DATA".
*/
public class ShoppingCartDataDao extends AbstractDao<ShoppingCartData, Long> {

    public static final String TABLENAME = "SHOPPING_CART_DATA";

    /**
     * Properties of entity ShoppingCartData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoreId = new Property(1, int.class, "StoreId", false, "STORE_ID");
        public final static Property StoreLogo = new Property(2, String.class, "StoreLogo", false, "STORE_LOGO");
        public final static Property StoreName = new Property(3, String.class, "StoreName", false, "STORE_NAME");
        public final static Property CoverUrl = new Property(4, String.class, "CoverUrl", false, "COVER_URL");
        public final static Property DealPrice = new Property(5, String.class, "DealPrice", false, "DEAL_PRICE");
        public final static Property GoodsId = new Property(6, String.class, "GoodsId", false, "GOODS_ID");
        public final static Property GoodsNum = new Property(7, int.class, "GoodsNum", false, "GOODS_NUM");
        public final static Property Price = new Property(8, String.class, "Price", false, "PRICE");
        public final static Property Title = new Property(9, String.class, "Title", false, "TITLE");
    }


    public ShoppingCartDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingCartDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOPPING_CART_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STORE_ID\" INTEGER NOT NULL ," + // 1: StoreId
                "\"STORE_LOGO\" TEXT," + // 2: StoreLogo
                "\"STORE_NAME\" TEXT," + // 3: StoreName
                "\"COVER_URL\" TEXT," + // 4: CoverUrl
                "\"DEAL_PRICE\" TEXT," + // 5: DealPrice
                "\"GOODS_ID\" TEXT," + // 6: GoodsId
                "\"GOODS_NUM\" INTEGER NOT NULL ," + // 7: GoodsNum
                "\"PRICE\" TEXT," + // 8: Price
                "\"TITLE\" TEXT);"); // 9: Title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOPPING_CART_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShoppingCartData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStoreId());
 
        String StoreLogo = entity.getStoreLogo();
        if (StoreLogo != null) {
            stmt.bindString(3, StoreLogo);
        }
 
        String StoreName = entity.getStoreName();
        if (StoreName != null) {
            stmt.bindString(4, StoreName);
        }
 
        String CoverUrl = entity.getCoverUrl();
        if (CoverUrl != null) {
            stmt.bindString(5, CoverUrl);
        }
 
        String DealPrice = entity.getDealPrice();
        if (DealPrice != null) {
            stmt.bindString(6, DealPrice);
        }
 
        String GoodsId = entity.getGoodsId();
        if (GoodsId != null) {
            stmt.bindString(7, GoodsId);
        }
        stmt.bindLong(8, entity.getGoodsNum());
 
        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(9, Price);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(10, Title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShoppingCartData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStoreId());
 
        String StoreLogo = entity.getStoreLogo();
        if (StoreLogo != null) {
            stmt.bindString(3, StoreLogo);
        }
 
        String StoreName = entity.getStoreName();
        if (StoreName != null) {
            stmt.bindString(4, StoreName);
        }
 
        String CoverUrl = entity.getCoverUrl();
        if (CoverUrl != null) {
            stmt.bindString(5, CoverUrl);
        }
 
        String DealPrice = entity.getDealPrice();
        if (DealPrice != null) {
            stmt.bindString(6, DealPrice);
        }
 
        String GoodsId = entity.getGoodsId();
        if (GoodsId != null) {
            stmt.bindString(7, GoodsId);
        }
        stmt.bindLong(8, entity.getGoodsNum());
 
        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(9, Price);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(10, Title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShoppingCartData readEntity(Cursor cursor, int offset) {
        ShoppingCartData entity = new ShoppingCartData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // StoreId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StoreLogo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // StoreName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CoverUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DealPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // GoodsId
            cursor.getInt(offset + 7), // GoodsNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShoppingCartData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoreId(cursor.getInt(offset + 1));
        entity.setStoreLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStoreName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDealPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodsId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGoodsNum(cursor.getInt(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShoppingCartData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShoppingCartData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShoppingCartData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
